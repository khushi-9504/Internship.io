React is Javascript library for building user interfaces. It is used for creating reusable UI components. 

Features : Components based architecture, Virtual DOM, One-way data binding, JSX, etc.

JSX : JSX is a syntax extension for JavaScript. It allows you to write HTML-like code in your JavaScript files. It is used to create React components.

Components: Functional Components and Class Components

Functional Components : 

function PrintName(){

  let name="abc xyz";

  return(
    <>
      <h1>Hello, {name}</h1>
    </>
  );
}

Class Components : 

class PrintName extends React.Component{
  
  render(
    let name = "abc xyz";
    return <h2>Hello, {name}</h2>;
  );
}

LifeCycle of Class Components : Mounting, Updating and Unmounting

1. Mounting means putting elements into the DOM. React has four built-in methods that gets called, in this order, when mounting a component:

  constructor()
  getDerivedStateFromProps()
  render()
  componentDidMount()

The render() method is required and will always be called, the others are optional and will be called if you define them.

2. The next phase in the lifecycle is when a component is updated. A component is updated whenever there is a change in the component's state or props. React has five built-in methods that gets called, in this order, when a component is updated:

  getDerivedStateFromProps()
  shouldComponentUpdate()
  render()
  getSnapshotBeforeUpdate()
  componentDidUpdate()

3. The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it. React has only one built-in method that gets called when a component is unmounted:

  componentWillUnmount()

Props: Props stands for Properties. Props are immutable values that are passed to a component from its parent. 

Lists: JavaScript has a built-in function called map() that can be used to render lists of items. The map() function takes a function as an argument and applies it to each item in the list. The function should return a JSX element for each item in the list. 

Keys: React uses a concept called keys to keep track of the items in a list. Keys are unique identifiers. They are used to identify which items in the list have changed, are added, or are removed. If you don't specify a key, React will use the index of the item in the list as the key. 

State: State is an in-built react object, which stores information of the component. It can be used to store data that changes over time. whenever the state changes, the component re-renders. setState or setCount doesn't update the values immediately, it keeps the changes in a queue and updates the state after the current batch of event handlers has finished. 
React batches multiple state updates into a single re-render to improve performance. Batching means React groups multiple setState() calls together and updates the DOM once instead of on every call. 


const [variable, setVariable] = useState(initialValue);

CSS Styling in React : 3 ways to add CSS to React components: 1. Inline Styles: You can add styles directly to the JSX element using the style attribute. 2. External CSS File 3. CSS Modules: You can use CSS modules to import CSS files and use the styles in your React components. 

Conditional Rendering: Conditional rendering is a feature in React that allows you to render different components based on certain conditions. There are several ways to do conditional rendering in React, including using the if statement, the ternary operator, and the switch statement. && operator can also be used for conditional rendering. 

Event Handling: Event handling is the process of responding to user interactions with a React application. In React, event handling is typically done using the event handler function. The event handler function is a function that is called when a specific event occurs. For example, when a button is clicked, the event handler function is called. 

Hooks: Hooks are a new way to use state and other React features in functional components. They let you "hook into" React state and lifecycle methods from function components. Hooks don't work inside classes. They let you use state and other React features without changing your component from a function to a class. There are several types of hooks, including useState, useEffect, useContext, and useReducer. 

Controlled and Uncontrolled Components: 

Controlled Components : A controlled component in React is an element whose state is controlled by React itself. This means that the component's state is stored in a React component's state and can only be updated by triggering a state change via Reactâ€™s setState() method.

Uncontrolled Components : An uncontrolled component in React refers to a component where the form element's state is not directly controlled by React. Instead, the form element itself maintains its own state, and React only interacts with the element indirectly through references (refs). - use of useRef() hook

Error Handling in react: Two ways to handle errors in React: 1. Try-catch block  2. Error Boundary: Error Boundary is a higher-order component that catches JavaScript errors anywhere in its component tree, logs the error, and displays a fallback UI instead of the component tree that crashed. It can be used to catch and display errors in a more user-friendly way. 
