React is Javascript library for building user interfaces. It is used for creating reusable UI components. 

Features : Components based architecture, Virtual DOM, One-way data binding, JSX, etc.

JSX : JSX is a syntax extension for JavaScript. It allows you to write HTML-like code in your JavaScript files. It is used to create React components.

Components: Functional Components and Class Components

Functional Components : 

function PrintName(){

  let name="abc xyz";

  return(
    <>
      <h1>Hello, {name}</h1>
    </>
  );
}

Class Components : 

class PrintName extends React.Component{
  
  render(
    let name = "abc xyz";
    return <h2>Hello, {name}</h2>;
  );
}

LifeCycle of Class Components : Mounting, Updating and Unmounting

1. Mounting means putting elements into the DOM. React has four built-in methods that gets called, in this order, when mounting a component:

  constructor()
  getDerivedStateFromProps()
  render()
  componentDidMount()

The render() method is required and will always be called, the others are optional and will be called if you define them.

2. The next phase in the lifecycle is when a component is updated. A component is updated whenever there is a change in the component's state or props. React has five built-in methods that gets called, in this order, when a component is updated:

  getDerivedStateFromProps()
  shouldComponentUpdate()
  render()
  getSnapshotBeforeUpdate()
  componentDidUpdate()

3. The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it. React has only one built-in method that gets called when a component is unmounted:

  componentWillUnmount()

Props: Props stands for Properties. Props are immutable values that are passed to a component from its parent. 

Lists: JavaScript has a built-in function called map() that can be used to render lists of items. The map() function takes a function as an argument and applies it to each item in the list. The function should return a JSX element for each item in the list. 

Keys: React uses a concept called keys to keep track of the items in a list. Keys are unique identifiers. They are used to identify which items in the list have changed, are added, or are removed. If you don't specify a key, React will use the index of the item in the list as the key. 

State: State is an in-built react object, which stores information of the component. It can be used to store data that changes over time. whenever the state changes, the component re-renders. setState or setCount doesn't update the values immediately, it keeps the changes in a queue and updates the state after the current batch of event handlers has finished. 
React batches multiple state updates into a single re-render to improve performance. Batching means React groups multiple setState() calls together and updates the DOM once instead of on every call. 


const [variable, setVariable] = useState(initialValue);

CSS Styling in React : 3 ways to add CSS to React components: 1. Inline Styles: You can add styles directly to the JSX element using the style attribute. 2. External CSS File 3. CSS Modules: You can use CSS modules to import CSS files and use the styles in your React components. 

Conditional Rendering: Conditional rendering is a feature in React that allows you to render different components based on certain conditions. There are several ways to do conditional rendering in React, including using the if statement, the ternary operator, and the switch statement. && operator can also be used for conditional rendering. 

Event Handling: Event handling is the process of responding to user interactions with a React application. In React, event handling is typically done using the event handler function. The event handler function is a function that is called when a specific event occurs. For example, when a button is clicked, the event handler function is called. 

Hooks: Hooks are a new way to use state and other React features in functional components. They let you "hook into" React state and lifecycle methods from function components. Hooks don't work inside classes. They let you use state and other React features without changing your component from a function to a class. There are several types of hooks, including useState, useEffect, useContext, and useReducer. 

Controlled and Uncontrolled Components: 

Controlled Components : A controlled component in React is an element whose state is controlled by React itself. This means that the component's state is stored in a React component's state and can only be updated by triggering a state change via Reactâ€™s setState() method.

Uncontrolled Components : An uncontrolled component in React refers to a component where the form element's state is not directly controlled by React. Instead, the form element itself maintains its own state, and React only interacts with the element indirectly through references (refs). - use of useRef() hook

Error Handling in react: Two ways to handle errors in React: 1. Try-catch block  2. Error Boundary: Error Boundary is a higher-order component that catches JavaScript errors anywhere in its component tree, logs the error, and displays a fallback UI instead of the component tree that crashed. It can be used to catch and display errors in a more user-friendly way. 

Hooks: 

useEffect : It is a hook that allows you to run some side effects (like API calls, setting timers, etc.) after rendering a component. It is called after every render. It can be used to fetch data from an API, update the DOM, or perform other side effects. It takes two arguments: a function to run and an array of dependencies. 

Dependency Value: [] - only once render , [variable] - every time variable changes, [variable1, variable2] - every time variable1 or variable2 changes, no dependency array - after every render

useContext : useContext is a React Hook that allows you to share state or values globally across your app without passing props manually through every component level (prop drilling).

Steps: 1. Create a context using the createContext() function. 2. Wrap your app with the Provider component and pass the context to it. 3. Use the useContext() hook in your components 

useReducer : useReducer is a hook that allows you to manage state changes in a more predictable and scalable way. It is similar to useState, but it allows you to handle more complex state changes. It takes two arguments: a reducer function and an initial state. The reducer function is a function that takes the current state and an action function as arguments and returns a new state. The action function is a function that describes the action that should be taken to update the state.  

syntax: const [state, dispatch] = useReducer(reducer, initialState);

Custom Hooks: A custom hook is a reusable function in React that lets me group related useState, useEffect, or other logic into a single function. This helps me keep components clean and makes logic easier to reuse across different parts of the app.

Fragments: Fragments are a way to group a list of children without adding extra nodes to the DOM. They are useful when you need to group a list of children without adding extra nodes to the DOM. They are created using the Fragment component. 

syntax: <React.Fragment></React.Fragment> OR <></>

React Dev Tools: React Dev Tools is a browser extension that allows you to inspect and debug React components in the browser. It provides a range of features, including the ability to inspect the component tree, identify performance bottlen cks, and debug issues with state and props. It is available for Chrome and Firefox. 

Environment Variables: Environment variables are variables that are set outside of the application and can be accessed within the application. They are useful for storing sensitive information, such as API keys, that should not be hardcoded into the application. They can be set in the environment or in a .env file. 

State Lifting: State lifting is the process of moving state from a child component to a parent component. It is useful when a child component needs to update the state of a parent component. It involves passing a function as a prop from the parent component to the child component, and then calling that function to update the state. 

Passing children using Props: Props are short for "properties" and they are used to pass data from a parent component to a child component. They are immutable, meaning they cannot be changed once they are passed to a child component . Props are passed as attributes to the JSX element. 

useMemo Hook: The useMemo hook is a hook that allows you to memoize the result of a function so that it is not recalculated on every render. It is useful for optimizing performance by avoiding unnecessary recalculations . It takes two arguments: a function to memoize and a dependency array. The function is only recalculated if the dependencies change. 

Memoization: Memoization is a technique used to optimize performance by avoiding unnecessary recalculations. It involves storing the results of expensive function calls and reusing them when the same inputs occur again. 

Reconcillation: Reconciliation is the process of comparing the virtual DOM with the actual DOM and updating the actual DOM to match the virtual DOM. It is an optimization technique used by React to improve performance. 

Virtual DOM: The virtual DOM is a lightweight in-memory representation of the actual DOM. It is used by React to optimize performance by minimizing the number of DOM mutations. 

Diffi Algorithm: The diffi algorithm is an algorithm used by React to compare the virtual DOM with the actual DOM and update the actual DOM to match the virtual DOM. It is an optimization technique used by React to improve performance. 

React Hook Form: React Hook Form is a library that provides a simple and intuitive way to handle form data in React applications . It provides a set of hooks that can be used to manage form state, validate form data, and handle form submission. 

  useForm() - main hook, register() - register form element with the hook, submitHandler() - handle the submission of form, watch() - track the input field current value

useNavigate: useNavigate is a hook that allows you to navigate between routes in a React application. It is used in conjunction with the react routing to navigate between routes. 

useParams: useParams is a hook that allows you to access the URL parameters of a route. It is used in conjunction with the useNavigate hook to navigate to a different route. It returns an object with the URL parameters as properties. 